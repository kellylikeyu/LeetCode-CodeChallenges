Given a list of directed edges edges representing one-way connections between nodes in a graph and a starting node start. Each edge is given as a two-element array [u, v] where u is the source node and v is the target node. Your task is to find the destination node (a node without outgoing edges) by traveling from the starting node along these directed edges until you reach the destination.

function findDestination(edges, start) {
    //build a map of origin:destination
    const originDestination = new Map()
    for (let [origin, destination] of paths) {
        originDestination.set(origin, destination)
    }
    let current = paths[0][0]

// if there is a loop
    const visited = new Set()
    while(originDestination.has(current)) {
        if (visited.has(current)) {
            throw new Error ('a loop comes up')
        }
        visited.add(current)
        current=originDestination.get(current)
    }
    return current
};
